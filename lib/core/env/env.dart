// GENERATED by FHipster â€” do not edit by hand.
// You may switch profile at runtime with: Env.setProfile('dev'|'prod').

import 'package:get/get.dart';

enum AuthProvider { keycloak, jhipsterJwt }
enum RelationshipPayloadMode { idOnly, fullObject }

class EnvConfig {
  // Identity
  final String appName;
  final String envName;

  // Networking
  final String apiHost;
  final bool useGateway;
  final String? gatewayServiceName;

  // Auth mode
  final AuthProvider authProvider;

  // JWT (JHipster)
  final String jwtAuthEndpoint;
  final String accountEndpoint;
  final bool allowCredentialCacheForJwt;

  // Keycloak (OIDC)
  final String? tokenEndpoint;
  final String? logoutEndpoint;
  final String? authorizeEndpoint;
  final String? userinfoEndpoint;
  final String? keycloakClientId;
  final String? keycloakClientSecret;
  final List<String> keycloakScopes;

  // Paging / sorting
  final int defaultPageSize;
  final List<int> pageSizeOptions;
  final List<String> defaultSort;
  final List<String> defaultSearchSort;
  final bool distinctByDefault;

  // Headers / storage keys
  final String totalCountHeaderName;
  final String storageKeyAccessToken;
  final String storageKeyAccessExpiry;
  final String storageKeyRefreshToken;
  final String storageKeyRefreshExpiry;
  final String storageKeyRememberedUsername;

  // Relationship payload
  final RelationshipPayloadMode relationshipPayloadMode;

  // Security options
  final String storageMode; // 'get_storage' | 'secure_storage'
  final bool httpStrict;    // require HTTPS
  final List<String> pinnedSha256Certs; // optional cert pins (hex)

  // Plural overrides for API resources
  final Map<String, String> pluralOverrides;

  const EnvConfig({
    // Identity
    required this.appName,
    required this.envName,

    // Networking
    required this.apiHost,
    required this.useGateway,
    required this.gatewayServiceName,

    // Auth
    required this.authProvider,

    // JWT
    required this.jwtAuthEndpoint,
    required this.accountEndpoint,
    required this.allowCredentialCacheForJwt,

    // Keycloak
    required this.tokenEndpoint,
    required this.logoutEndpoint,
    required this.authorizeEndpoint,
    required this.userinfoEndpoint,
    required this.keycloakClientId,
    required this.keycloakClientSecret,
    required this.keycloakScopes,

    // Paging / sorting
    required this.defaultPageSize,
    required this.pageSizeOptions,
    required this.defaultSort,
    required this.defaultSearchSort,
    required this.distinctByDefault,

    // Headers / storage
    required this.totalCountHeaderName,
    required this.storageKeyAccessToken,
    required this.storageKeyAccessExpiry,
    required this.storageKeyRefreshToken,
    required this.storageKeyRefreshExpiry,
    required this.storageKeyRememberedUsername,

    // Relationship payload
    required this.relationshipPayloadMode,

    // Security
    required this.storageMode,
    required this.httpStrict,
    required this.pinnedSha256Certs,

    // Plural overrides
    required this.pluralOverrides,
  });
}

class Env {
  static final _profiles = <String, EnvConfig>{};
  static EnvConfig _active = _default();

  static void registerProfiles(Map<String, EnvConfig> profiles) {
    _profiles
      ..clear()
      ..addAll(profiles);
  }

  static void setProfile(String name) {
    final p = _profiles[name];
    if (p == null) {
      throw ArgumentError("Profile '$name' not registered");
    }
    _active = p;
  }

  static EnvConfig get() => _active;

  /// Registers the baked-in 'dev' and 'prod' profiles generated from YAML.
  static void initGenerated() {
    registerProfiles({
      'dev': _dev(),
      'prod': _prod(),
    });
    _active = _dev();
  }

  static String pluralFor(String name) {
    final lower = name.toLowerCase();
    String? override;
    _active.pluralOverrides.forEach((k, v) {
      if (k.toLowerCase() == lower && v.isNotEmpty) {
        override = v;
      }
    });
    if (override != null) {
      return override!.toLowerCase();
    }
    if (_irregularPlurals.containsKey(lower)) {
      return _irregularPlurals[lower]!;
    }
    if (lower.endsWith('s')) return lower;
    if (_consonantY.hasMatch(lower)) {
      return lower.substring(0, lower.length - 1) + 'ies';
    }
    if (_sibilant.hasMatch(lower)) {
      return '${lower}es';
    }
    if (_fEnding.hasMatch(lower)) {
      if (lower.endsWith('fe')) return lower.substring(0, lower.length - 2) + 'ves';
      return lower.substring(0, lower.length - 1) + 'ves';
    }
    if (lower.endsWith('o') && !_vowelO.hasMatch(lower)) {
      return '${lower}es';
    }
    return '${lower}s';
  }

  static String entityBasePath(String plural, {String? microserviceOverride}) {
    final cfg = get();
    final segment = _trimSlashes(plural.isEmpty ? '' : plural);
    if (cfg.useGateway) {
      final svc = _trimSlashes(microserviceOverride ?? cfg.gatewayServiceName ?? '');
      if (svc.isNotEmpty) {
        return '/services/$svc/api/$segment';
      }
    }
    return '/api/$segment';
  }

  static String searchBasePath(String plural, {String? microserviceOverride}) {
    final cfg = get();
    final segment = _trimSlashes(plural.isEmpty ? '' : plural);
    if (cfg.useGateway) {
      final svc = _trimSlashes(microserviceOverride ?? cfg.gatewayServiceName ?? '');
      if (svc.isNotEmpty) {
        return '/services/$svc/api/_search/$segment';
      }
    }
    return '/api/_search/$segment';
  }

  static String _trimSlashes(String input) {
    return input.replaceAll(RegExp(r'^/+|/+$'), '');
  }

  static const Map<String, String> _irregularPlurals = {
    'person': 'people',
    'man': 'men',
    'woman': 'women',
    'child': 'children',
    'mouse': 'mice',
    'goose': 'geese',
    'tooth': 'teeth',
    'foot': 'feet',
    'ox': 'oxen',
  };

  static final RegExp _consonantY = RegExp(r'[bcdfghjklmnpqrstvwxyz]y$');
  static final RegExp _sibilant = RegExp(r'(s|x|z|ch|sh)$');
  static final RegExp _fEnding = RegExp(r'(?:[^f]fe|[lr]f)$');
  static final RegExp _vowelO = RegExp(r'[aeiou]o$');

  // ------------ Baked profiles ------------

  static EnvConfig _dev() => EnvConfig(
    appName: 'Operations (DEV)',
    envName: 'dev',
    apiHost: 'http://34.50.81.155:8080',
    useGateway: true,
    gatewayServiceName: 'operationsModule',

    authProvider: AuthProvider.keycloak,

    jwtAuthEndpoint: '/api/authenticate',
    accountEndpoint: '/api/account',
    allowCredentialCacheForJwt: false,

    tokenEndpoint: 'http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/token',
    logoutEndpoint: 'http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/logout',
    authorizeEndpoint: 'http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/auth',
    userinfoEndpoint: 'http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/userinfo',
    keycloakClientId: 'mobile_app',
    keycloakClientSecret: null,
    keycloakScopes: const ['openid', 'profile', 'email', 'offline_access'],

    defaultPageSize: 20,
    pageSizeOptions: [10,20,50,100],
    defaultSort: ['id,desc'],
    defaultSearchSort: ['_score,desc'],
    distinctByDefault: false,

    totalCountHeaderName: 'X-Total-Count',
    storageKeyAccessToken: 'fh_access_token',
    storageKeyAccessExpiry: 'fh_access_expiry',
    storageKeyRefreshToken: 'fh_refresh_token',
    storageKeyRefreshExpiry: 'fh_refresh_expiry',
    storageKeyRememberedUsername: 'fh_remembered_username',

    relationshipPayloadMode: RelationshipPayloadMode.idOnly,

    storageMode: 'secure_storage',
    httpStrict: true,
    pinnedSha256Certs: [],

    pluralOverrides: const {'person': 'people', 'address': 'addresses'},
  );

  static EnvConfig _prod() => EnvConfig(
    appName: 'Operations',
    envName: 'prod',
    apiHost: 'https://api.example.com',
    useGateway: true,
    gatewayServiceName: 'operationsModule',

    authProvider: AuthProvider.keycloak,

    jwtAuthEndpoint: '/api/authenticate',
    accountEndpoint: '/api/account',
    allowCredentialCacheForJwt: false,

    tokenEndpoint: 'https://auth.example.com/realms/myrealm/protocol/openid-connect/token',
    logoutEndpoint: 'https://auth.example.com/realms/myrealm/protocol/openid-connect/logout',
    authorizeEndpoint: 'https://auth.example.com/realms/myrealm/protocol/openid-connect/auth',
    userinfoEndpoint: 'https://auth.example.com/realms/myrealm/protocol/openid-connect/userinfo',
    keycloakClientId: 'mobile_app',
    keycloakClientSecret: null,
    keycloakScopes: const ['openid', 'profile', 'email', 'offline_access'],

    defaultPageSize: 20,
    pageSizeOptions: [10,20,50,100],
    defaultSort: ['id,desc'],
    defaultSearchSort: ['_score,desc'],
    distinctByDefault: false,

    totalCountHeaderName: 'X-Total-Count',
    storageKeyAccessToken: 'fh_access_token',
    storageKeyAccessExpiry: 'fh_access_expiry',
    storageKeyRefreshToken: 'fh_refresh_token',
    storageKeyRefreshExpiry: 'fh_refresh_expiry',
    storageKeyRememberedUsername: 'fh_remembered_username',

    relationshipPayloadMode: RelationshipPayloadMode.idOnly,

    storageMode: 'secure_storage',
    httpStrict: true,
    pinnedSha256Certs: [],

    pluralOverrides: const {'person': 'people', 'address': 'addresses'},
  );

  static EnvConfig _default() => _dev();
}
