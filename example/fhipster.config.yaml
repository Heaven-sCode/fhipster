# FHipster config (YAML)
emitMain: true
enableSQLite: true

# --- Inputs used by the generator itself ---
jdlFile: ./JDL/app.jdl
outputDir: ./lib
microservice: operationsModule

# Common (fallback) defaults for both profiles
appName: Operations
envName: dev                   # default envName (used if profile omits it)
includeAuthGuards: true

# Paging / sorting defaults
defaultPageSize: 20
pageSizeOptions: [10, 20, 50, 100]
defaultSort: ['id,desc']
defaultSearchSort: ['_score,desc']
distinctByDefault: false

# Headers / storage key names
totalCountHeaderName: X-Total-Count
storageKeyAccessToken: fh_access_token
storageKeyAccessExpiry: fh_access_expiry
storageKeyRefreshToken: fh_refresh_token
storageKeyRefreshExpiry: fh_refresh_expiry
storageKeyRememberedUsername: fh_remembered_username

# Relationships payload mode for services: idOnly | fullObject
relationshipPayloadMode: idOnly

# Plural overrides when API resource names differ
pluralOverrides:
  person: people
  address: addresses

# Tenant isolation
tenantIsolationEnabled: false
tenantFieldName: userId

# --- Profiles: dev & prod ---
profiles:
  dev:
    apiHost: http://34.50.81.155:8080
    useGateway: true
    gatewayServiceName: operationsModule
    appName: Operations (DEV)
    envName: dev

    storageMode: secure_storage   # or get_storage (default)
    httpStrict: true              # require HTTPS
    pinnedSha256Certs: []         # ['ab12cd...'] to enable pinning

    auth:
      provider: keycloak  # keycloak | jhipsterJwt
      # For Keycloak:
      keycloak:
        tokenEndpoint:      http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/token
        logoutEndpoint:     http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/logout
        authorizeEndpoint:  http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/auth
        userinfoEndpoint:   http://34.50.81.155:8080/realms/myrealm/protocol/openid-connect/userinfo
        clientId:           mobile_app
        clientSecret:       ""
        scopes: [openid, profile, email, offline_access]
      # For JWT (if you switch provider to jhipsterJwt):
      # jwtAuthEndpoint: /api/authenticate
      # accountEndpoint: /api/account
      # allowCredentialCacheForJwt: false

  prod:
    apiHost: https://api.example.com
    useGateway: true
    gatewayServiceName: operationsModule
    appName: Operations
    envName: prod

    storageMode: secure_storage   # or get_storage (default)
    httpStrict: true              # require HTTPS
    pinnedSha256Certs: []         # ['ab12cd...'] to enable pinning


    auth:
      provider: keycloak
      keycloak:
        tokenEndpoint:      https://auth.example.com/realms/myrealm/protocol/openid-connect/token
        logoutEndpoint:     https://auth.example.com/realms/myrealm/protocol/openid-connect/logout
        authorizeEndpoint:  https://auth.example.com/realms/myrealm/protocol/openid-connect/auth
        userinfoEndpoint:   https://auth.example.com/realms/myrealm/protocol/openid-connect/userinfo
        clientId:           mobile_app
        clientSecret:       ""
        scopes: [openid, profile, email, offline_access]
