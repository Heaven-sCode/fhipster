// generators/env_generator.js
// Emits lib/core/env/env.dart with two baked profiles and security options.

function dartList(list) {
  return `const [${(list || []).map(v => JSON.stringify(v)).join(', ')}]`.replace(/"/g, '\'');
}
function dartStringLiteral(v) {
  return `'${String(v).replace(/'/g, "\\'")}'`;
}
function dartStringOrNull(v) {
  if (v === null || v === undefined) return 'null';
  return dartStringLiteral(v);
}
function boolOr(value, fallback) {
  return value === true ? 'true' : value === false ? 'false' : (fallback ? 'true' : 'false');
}
function dartMap(obj) {
  const entries = Object.entries(obj || {});
  if (!entries.length) return 'const {}';
  const body = entries
    .filter(([k, v]) => k !== undefined && k !== null && v !== undefined && v !== null)
    .map(([k, v]) => `${dartStringLiteral(String(k))}: ${dartStringLiteral(String(v))}`)
    .join(', ');
  return `const {${body}}`;
}
function relMode(value) {
  const v = String(value || '').toLowerCase();
  return v === 'fullobject' ? 'RelationshipPayloadMode.fullObject' : 'RelationshipPayloadMode.idOnly';
}

function generateEnvTemplate({ devProfile, prodProfile }) {
  const dev = devProfile || {};
  const prod = prodProfile || {};
  const DOLLAR = '$';

  return `// GENERATED by FHipster â€” do not edit by hand.
// You may switch profile at runtime with: Env.setProfile('dev'|'prod').

import 'package:get/get.dart';

enum AuthProvider { keycloak, jhipsterJwt }
enum RelationshipPayloadMode { idOnly, fullObject }

class EnvConfig {
  // Identity
  final String appName;
  final String envName;

  // Networking
  final String apiHost;
  final bool useGateway;
  final String? gatewayServiceName;

  // Auth mode
  final AuthProvider authProvider;

  // JWT (JHipster)
  final String jwtAuthEndpoint;
  final String accountEndpoint;
  final bool allowCredentialCacheForJwt;

  // Keycloak (OIDC)
  final String? tokenEndpoint;
  final String? logoutEndpoint;
  final String? authorizeEndpoint;
  final String? userinfoEndpoint;
  final String? keycloakClientId;
  final String? keycloakClientSecret;
  final List<String> keycloakScopes;

  // Paging / sorting
  final int defaultPageSize;
  final List<int> pageSizeOptions;
  final List<String> defaultSort;
  final List<String> defaultSearchSort;
  final bool distinctByDefault;

  // Headers / storage keys
  final String totalCountHeaderName;
  final String storageKeyAccessToken;
  final String storageKeyAccessExpiry;
  final String storageKeyRefreshToken;
  final String storageKeyRefreshExpiry;
  final String storageKeyRememberedUsername;

  // Relationship payload
  final RelationshipPayloadMode relationshipPayloadMode;

  // Security options
  final String storageMode; // 'get_storage' | 'secure_storage'
  final bool httpStrict;    // require HTTPS
  final List<String> pinnedSha256Certs; // optional cert pins (hex)

  // Plural overrides for API resources
  final Map<String, String> pluralOverrides;

  const EnvConfig({
    // Identity
    required this.appName,
    required this.envName,

    // Networking
    required this.apiHost,
    required this.useGateway,
    required this.gatewayServiceName,

    // Auth
    required this.authProvider,

    // JWT
    required this.jwtAuthEndpoint,
    required this.accountEndpoint,
    required this.allowCredentialCacheForJwt,

    // Keycloak
    required this.tokenEndpoint,
    required this.logoutEndpoint,
    required this.authorizeEndpoint,
    required this.userinfoEndpoint,
    required this.keycloakClientId,
    required this.keycloakClientSecret,
    required this.keycloakScopes,

    // Paging / sorting
    required this.defaultPageSize,
    required this.pageSizeOptions,
    required this.defaultSort,
    required this.defaultSearchSort,
    required this.distinctByDefault,

    // Headers / storage
    required this.totalCountHeaderName,
    required this.storageKeyAccessToken,
    required this.storageKeyAccessExpiry,
    required this.storageKeyRefreshToken,
    required this.storageKeyRefreshExpiry,
    required this.storageKeyRememberedUsername,

    // Relationship payload
    required this.relationshipPayloadMode,

    // Security
    required this.storageMode,
    required this.httpStrict,
    required this.pinnedSha256Certs,

    // Plural overrides
    required this.pluralOverrides,
  });
}

class Env {
  static final _profiles = <String, EnvConfig>{};
  static EnvConfig _active = _default();

  static void registerProfiles(Map<String, EnvConfig> profiles) {
    _profiles
      ..clear()
      ..addAll(profiles);
  }

  static void setProfile(String name) {
    final p = _profiles[name];
    if (p == null) {
      throw ArgumentError("Profile '\$name' not registered");
    }
    _active = p;
  }

  static EnvConfig get() => _active;

  /// Registers the baked-in 'dev' and 'prod' profiles generated from YAML.
  static void initGenerated() {
    registerProfiles({
      'dev': _dev(),
      'prod': _prod(),
    });
    _active = _dev();
  }

  static String pluralFor(String name) {
    final lower = name.toLowerCase();
    String? override;
    _active.pluralOverrides.forEach((k, v) {
      if (k.toLowerCase() == lower && v.isNotEmpty) {
        override = v;
      }
    });
    if (override != null) {
      return override!.toLowerCase();
    }
    if (_irregularPlurals.containsKey(lower)) {
      return _irregularPlurals[lower]!;
    }
    if (lower.endsWith('s')) return lower;
    if (_consonantY.hasMatch(lower)) {
      return lower.substring(0, lower.length - 1) + 'ies';
    }
    if (_sibilant.hasMatch(lower)) {
      return ${dartStringLiteral(DOLLAR + '{lower}es')};
    }
    if (_fEnding.hasMatch(lower)) {
      if (lower.endsWith('fe')) return lower.substring(0, lower.length - 2) + 'ves';
      return lower.substring(0, lower.length - 1) + 'ves';
    }
    if (lower.endsWith('o') && !_vowelO.hasMatch(lower)) {
      return ${dartStringLiteral(DOLLAR + '{lower}es')};
    }
    return ${dartStringLiteral(DOLLAR + '{lower}s')};
  }

  static String entityBasePath(String plural, {String? microserviceOverride}) {
    final cfg = get();
    final segment = _trimSlashes(plural.isEmpty ? '' : plural);
    if (cfg.useGateway) {
      final svc = _trimSlashes(microserviceOverride ?? cfg.gatewayServiceName ?? '');
      if (svc.isNotEmpty) {
        return '/services/$svc/api/$segment';
      }
    }
    return '/api/$segment';
  }

  static String searchBasePath(String plural, {String? microserviceOverride}) {
    final cfg = get();
    final segment = _trimSlashes(plural.isEmpty ? '' : plural);
    if (cfg.useGateway) {
      final svc = _trimSlashes(microserviceOverride ?? cfg.gatewayServiceName ?? '');
      if (svc.isNotEmpty) {
        return '/services/$svc/api/_search/$segment';
      }
    }
    return '/api/_search/$segment';
  }

  static String _trimSlashes(String input) {
    return input.replaceAll(RegExp(r'^/+|/+$'), '');
  }

  static const Map<String, String> _irregularPlurals = {
    'person': 'people',
    'man': 'men',
    'woman': 'women',
    'child': 'children',
    'mouse': 'mice',
    'goose': 'geese',
    'tooth': 'teeth',
    'foot': 'feet',
    'ox': 'oxen',
  };

  static final RegExp _consonantY = RegExp(r'[bcdfghjklmnpqrstvwxyz]y$');
  static final RegExp _sibilant = RegExp(r'(s|x|z|ch|sh)$');
  static final RegExp _fEnding = RegExp(r'(?:[^f]fe|[lr]f)$');
  static final RegExp _vowelO = RegExp(r'[aeiou]o$');

  // ------------ Baked profiles ------------

  static EnvConfig _dev() => EnvConfig(
    appName: ${dartStringOrNull(dev.appName || 'FHipster')},
    envName: ${dartStringOrNull(dev.envName || 'dev')},
    apiHost: ${dartStringOrNull(dev.apiHost || 'http://localhost:8080')},
    useGateway: ${boolOr(dev.useGateway, false)},
    gatewayServiceName: ${dartStringOrNull(dev.gatewayServiceName || null)},

    authProvider: AuthProvider.${(dev.authProvider || 'keycloak') === 'jhipsterJwt' ? 'jhipsterJwt' : 'keycloak'},

    jwtAuthEndpoint: ${dartStringOrNull(dev.jwtAuthEndpoint || '/api/authenticate')},
    accountEndpoint: ${dartStringOrNull(dev.accountEndpoint || '/api/account')},
    allowCredentialCacheForJwt: ${boolOr(dev.allowCredentialCacheForJwt, false)},

    tokenEndpoint: ${dartStringOrNull(dev.keycloakTokenEndpoint || null)},
    logoutEndpoint: ${dartStringOrNull(dev.keycloakLogoutEndpoint || null)},
    authorizeEndpoint: ${dartStringOrNull(dev.keycloakAuthorizeEndpoint || null)},
    userinfoEndpoint: ${dartStringOrNull(dev.keycloakUserinfoEndpoint || null)},
    keycloakClientId: ${dartStringOrNull(dev.keycloakClientId || null)},
    keycloakClientSecret: ${dartStringOrNull(dev.keycloakClientSecret || null)},
    keycloakScopes: ${dartList(dev.keycloakScopes || ['openid','profile','email','offline_access'])},

    defaultPageSize: ${(dev.defaultPageSize ?? 20)},
    pageSizeOptions: ${JSON.stringify(dev.pageSizeOptions || [10,20,50,100]).replace(/"/g, '')},
    defaultSort: ${JSON.stringify(dev.defaultSort || ['id,desc']).replace(/"/g, '\'')},
    defaultSearchSort: ${JSON.stringify(dev.defaultSearchSort || ['_score,desc']).replace(/"/g, '\'')},
    distinctByDefault: ${boolOr(dev.distinctByDefault, false)},

    totalCountHeaderName: ${dartStringOrNull(dev.totalCountHeaderName || 'X-Total-Count')},
    storageKeyAccessToken: ${dartStringOrNull(dev.storageKeyAccessToken || 'fh_access_token')},
    storageKeyAccessExpiry: ${dartStringOrNull(dev.storageKeyAccessExpiry || 'fh_access_expiry')},
    storageKeyRefreshToken: ${dartStringOrNull(dev.storageKeyRefreshToken || 'fh_refresh_token')},
    storageKeyRefreshExpiry: ${dartStringOrNull(dev.storageKeyRefreshExpiry || 'fh_refresh_expiry')},
    storageKeyRememberedUsername: ${dartStringOrNull(dev.storageKeyRememberedUsername || 'fh_remembered_username')},

    relationshipPayloadMode: ${relMode(dev.relationshipPayloadMode || 'idOnly')},

    storageMode: ${dartStringOrNull(dev.storageMode || 'get_storage')},
    httpStrict: ${boolOr(dev.httpStrict, false)},
    pinnedSha256Certs: ${JSON.stringify(dev.pinnedSha256Certs || []).replace(/"/g, '\'')},

    pluralOverrides: ${dartMap(dev.pluralOverrides || {})},
  );

  static EnvConfig _prod() => EnvConfig(
    appName: ${dartStringOrNull(prod.appName || dev.appName || 'FHipster')},
    envName: ${dartStringOrNull(prod.envName || 'prod')},
    apiHost: ${dartStringOrNull(prod.apiHost || dev.apiHost || 'http://localhost:8080')},
    useGateway: ${boolOr(prod.useGateway, dev.useGateway || false)},
    gatewayServiceName: ${dartStringOrNull(prod.gatewayServiceName || dev.gatewayServiceName || null)},

    authProvider: AuthProvider.${(prod.authProvider || dev.authProvider || 'keycloak') === 'jhipsterJwt' ? 'jhipsterJwt' : 'keycloak'},

    jwtAuthEndpoint: ${dartStringOrNull(prod.jwtAuthEndpoint || dev.jwtAuthEndpoint || '/api/authenticate')},
    accountEndpoint: ${dartStringOrNull(prod.accountEndpoint || dev.accountEndpoint || '/api/account')},
    allowCredentialCacheForJwt: ${boolOr(prod.allowCredentialCacheForJwt, dev.allowCredentialCacheForJwt || false)},

    tokenEndpoint: ${dartStringOrNull(prod.keycloakTokenEndpoint || dev.keycloakTokenEndpoint || null)},
    logoutEndpoint: ${dartStringOrNull(prod.keycloakLogoutEndpoint || dev.keycloakLogoutEndpoint || null)},
    authorizeEndpoint: ${dartStringOrNull(prod.keycloakAuthorizeEndpoint || dev.keycloakAuthorizeEndpoint || null)},
    userinfoEndpoint: ${dartStringOrNull(prod.keycloakUserinfoEndpoint || dev.keycloakUserinfoEndpoint || null)},
    keycloakClientId: ${dartStringOrNull(prod.keycloakClientId || dev.keycloakClientId || null)},
    keycloakClientSecret: ${dartStringOrNull(prod.keycloakClientSecret || dev.keycloakClientSecret || null)},
    keycloakScopes: ${dartList(prod.keycloakScopes || dev.keycloakScopes || ['openid','profile','email','offline_access'])},

    defaultPageSize: ${(prod.defaultPageSize ?? dev.defaultPageSize ?? 20)},
    pageSizeOptions: ${JSON.stringify(prod.pageSizeOptions || dev.pageSizeOptions || [10,20,50,100]).replace(/"/g, '')},
    defaultSort: ${JSON.stringify(prod.defaultSort || dev.defaultSort || ['id,desc']).replace(/"/g, '\'')},
    defaultSearchSort: ${JSON.stringify(prod.defaultSearchSort || dev.defaultSearchSort || ['_score,desc']).replace(/"/g, '\'')},
    distinctByDefault: ${boolOr(prod.distinctByDefault, dev.distinctByDefault || false)},

    totalCountHeaderName: ${dartStringOrNull(prod.totalCountHeaderName || dev.totalCountHeaderName || 'X-Total-Count')},
    storageKeyAccessToken: ${dartStringOrNull(prod.storageKeyAccessToken || dev.storageKeyAccessToken || 'fh_access_token')},
    storageKeyAccessExpiry: ${dartStringOrNull(prod.storageKeyAccessExpiry || dev.storageKeyAccessExpiry || 'fh_access_expiry')},
    storageKeyRefreshToken: ${dartStringOrNull(prod.storageKeyRefreshToken || dev.storageKeyRefreshToken || 'fh_refresh_token')},
    storageKeyRefreshExpiry: ${dartStringOrNull(prod.storageKeyRefreshExpiry || dev.storageKeyRefreshExpiry || 'fh_refresh_expiry')},
    storageKeyRememberedUsername: ${dartStringOrNull(prod.storageKeyRememberedUsername || dev.storageKeyRememberedUsername || 'fh_remembered_username')},

    relationshipPayloadMode: ${relMode(prod.relationshipPayloadMode || dev.relationshipPayloadMode || 'idOnly')},

    storageMode: ${dartStringOrNull(prod.storageMode || dev.storageMode || 'get_storage')},
    httpStrict: ${boolOr(prod.httpStrict, dev.httpStrict || false)},
    pinnedSha256Certs: ${JSON.stringify(prod.pinnedSha256Certs || dev.pinnedSha256Certs || []).replace(/"/g, '\'')},

    pluralOverrides: ${dartMap(prod.pluralOverrides || dev.pluralOverrides || {})},
  );

  static EnvConfig _default() => _dev();
}
`;
}

module.exports = { generateEnvTemplate };
